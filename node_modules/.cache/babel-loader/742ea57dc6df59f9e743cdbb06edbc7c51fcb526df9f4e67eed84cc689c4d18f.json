{"ast":null,"code":"import { toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0e991e68\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"task-content\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"task-done\"\n};\nconst _hoisted_3 = {\n  class: \"task-btns\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  const _component_Edit = _resolveComponent(\"Edit\");\n  const _component_Delete = _resolveComponent(\"Delete\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([{\n      'task-active': $data.isCompleted\n    }, \"task\"])\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"p\", {\n    class: _normalizeClass([{\n      'task-body-active': $data.isCompleted\n    }, \"task-body\"])\n  }, _toDisplayString($props.task.task_body), 3 /* TEXT, CLASS */), $data.isCompleted ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \" - Выполнено\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_checkbox, {\n    class: \"check-box\",\n    modelValue: $data.isCompleted,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.isCompleted = $event),\n    onChange: $options.changeIsCompleted,\n    size: \"large\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createVNode(_component_Edit, {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$emit('edit', $props.task)),\n    class: \"edit-icon\"\n  }), _createVNode(_component_Delete, {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.$emit('delete', $props.task)),\n    class: \"del-icon\"\n  })])], 2 /* CLASS */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_normalizeClass","$data","isCompleted","_createElementVNode","_hoisted_1","$props","task","task_body","_hoisted_2","_createCommentVNode","_hoisted_3","_createVNode","_component_el_checkbox","modelValue","_cache","$event","onChange","$options","changeIsCompleted","size","_component_Edit","onClick","_ctx","$emit","_component_Delete"],"sources":["/Users/evgenijantonyuk/Desktop/Urban/vue/TaskList-Vue/src/components/TaskItem.vue"],"sourcesContent":["<template>\r\n  <div :class=\"{ 'task-active': isCompleted }\" class=\"task\">\r\n    <div class=\"task-content\">\r\n      <p :class=\"{ 'task-body-active': isCompleted }\" class=\"task-body\">{{ task.task_body }}</p>\r\n\r\n      <p v-if=\"isCompleted\" class=\"task-done\"> - Выполнено</p>\r\n    </div>\r\n    <div class=\"task-btns\">\r\n      <el-checkbox class=\"check-box\" v-model=\"isCompleted\" @change=\"changeIsCompleted\" size=\"large\" />\r\n      <Edit @click=\"$emit('edit', task)\" class=\"edit-icon\"/>\r\n      <Delete @click=\"$emit('delete', task)\" class=\"del-icon\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MyButton from \"@/components/UI/MyButton\"\r\nimport { Delete, Edit } from \"@element-plus/icons-vue\"\r\n\r\nexport default {\r\n  name: \"TaskItem\",\r\n  components: { Delete, Edit, MyButton },\r\n  props: {\r\n    task: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isCompleted: false,\r\n      pClass: 'task-body'\r\n    }\r\n  },\r\n  methods: {\r\n    changeIsCompleted() {\r\n      if(this.task) {\r\n        this.task.isCompleted = this.isCompleted\r\n        this.pClass += '-active'\r\n      }\r\n      this.$emit('is-completed', this.task)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.task {\r\n  background: #c6e2ff;\r\n  height: 20%;\r\n  width: 70%;\r\n  padding: 1.5%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  margin: 1% 0;\r\n}\r\n\r\n.task-active {\r\n  background: #83ff8a;\r\n  height: 20%;\r\n  width: 70%;\r\n  padding: 1.5%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  margin: 1% 0;\r\n}\r\n\r\n.task-content {\r\n  width: 80%;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.task-btns {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 13%;\r\n  align-items: center;\r\n}\r\n\r\n.task-body {\r\n  margin-right: 1%;\r\n}\r\n\r\n.task-body-active {\r\n  margin-right: 1%;\r\n  color: #77e377;\r\n}\r\n\r\n.task-done {\r\n  margin-left: 1%;\r\n  text-align: center;\r\n  color: #65d965;\r\n  text-decoration: line-through;\r\n}\r\n\r\n.task-content {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.edit-icon {\r\n  width: 1.5em;\r\n  height: 1.3em;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n}\r\n\r\n.del-icon {\r\n  width: 1.5em;\r\n  height: 1.3em;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":";;;EAESA,KAAK,EAAC;AAAc;;EAF7BC,GAAA;EAK4BD,KAAK,EAAC;;;EAEzBA,KAAK,EAAC;AAAW;;;;;uBANxBE,mBAAA,CAWM;IAXAF,KAAK,EADbG,eAAA;MAAA,eACgCC,KAAA,CAAAC;IAAW,GAAU,MAAM;MACvDC,mBAAA,CAIM,OAJNC,UAIM,GAHJD,mBAAA,CAA0F;IAAtFN,KAAK,EAHfG,eAAA;MAAA,oBAGuCC,KAAA,CAAAC;IAAW,GAAU,WAAW;sBAAIG,MAAA,CAAAC,IAAI,CAACC,SAAS,yBAE1EN,KAAA,CAAAC,WAAW,I,cAApBH,mBAAA,CAAwD,KAAxDS,UAAwD,EAAhB,cAAY,KAL1DC,mBAAA,e,GAOIN,mBAAA,CAIM,OAJNO,UAIM,GAHJC,YAAA,CAAgGC,sBAAA;IAAnFf,KAAK,EAAC,WAAW;IARpCgB,UAAA,EAQ8CZ,KAAA,CAAAC,WAAW;IARzD,uBAAAY,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQ8Cd,KAAA,CAAAC,WAAW,GAAAa,MAAA;IAAGC,QAAM,EAAEC,QAAA,CAAAC,iBAAiB;IAAEC,IAAI,EAAC;uDACtFR,YAAA,CAAsDS,eAAA;IAA/CC,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,IAAA,CAAAC,KAAK,SAASlB,MAAA,CAAAC,IAAI;IAAGT,KAAK,EAAC;MACzCc,YAAA,CAAyDa,iBAAA;IAAhDH,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,IAAA,CAAAC,KAAK,WAAWlB,MAAA,CAAAC,IAAI;IAAGT,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}